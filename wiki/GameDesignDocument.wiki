G.l.a.s.s. B.r.e.a.k.e.r.

Screen shot mockup – ALL Artist & Screenshot of Prototype

I. Artist Statement/Philosophy/The WHY Factor (why create this game? why would someone want to play it?) - Ever feel frustrated with the new EMPAC building? Why not use the money you pay to go here on something useful? Well now you can take out your frustration on EMPAC in the game G.l.a.s.s. B.r.e.a.k.e.r. and break the windows of that annoying building.

II. Predecessor or previous games/ distinctive factors in this genre - Ryan

III. Target Audience –The target audience is RPI students. Specifically any who have made the observation that EMPAC’s windows would be a target for rock throwers or just want to vent their frustration about the perceived waste of money spent on EMPAC.

IV. Introduction & Story - Jeremy

V. Immediate and long term projected socio/cultural project impact - The immediate impact the game will have on society is the visible dissatisfaction with the EMPAC complex.  Students will be able to show their dislike for the building by playing this game and the more they play it the more it will show they dislike EMPAC.

Long term impact may be much more devastating to the actual EMPAC building.  Games sometimes give already disturbed people bad ideas and this may be the case.  A student who has been plotting some way to harm EMPAC may see this game as an inspiration.  On the other hand, if the game becomes popular among students, RPI administrators may ask for student input in future construction projects to avoid the backlash that they have faced.


VI. Delivery System & Requirements - Jeremy

VII. Interface - Ryan

VIII. User Interaction - Jeremy

IX. The World Layout - Evan

X. Level Design - Evan

XI. Visualization- characters, flow charts - Ryan

XII. Music/ Sound Design – The main sounds are suction cup popping sounds when the player moves the character, glass breaking and tinkling sounds when a window is broken, whooshing sounds when a projectile is thrown and police sirens. The game could also have a generic ambient music loop in the background.

XIII. Rules and Gameplay A. Setup, B. Gameplay, C. Scoring - Jeremy

XIV. Program Structure - Written in python. Screens organized in a stack. Each Screen is a Layer and is managed by a layer manager.  Each Screen calls the creation of classes that are placed onto that screen. Each class contains: HandleEvent, Update, and Render functions to be called by the screen. Every different entity will have its own file and class.

Template:
import layermanager
class Template(layermanager.Layer):
    def __init__(self,screen):
        layermanager.Layer.__init__(self)

    def HandleEvent(self, event):
        pass

    def Update(self):
        pass

    def Render(self, screen):   
        pass

XV. Technical Specs: Physics, Rendering System, Lighting Models - Game will be 2D using Pygame.

XVI. Implementation - Evan

XVII. Production Timeframe - Ryan